// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ping": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "ping"
                ],
                "summary": "Ping the server",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/server/join": {
            "post": {
                "description": "A logged in user is able to join a server given a valid invite code, the serverId is returned",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Join a server given an invite code",
                "parameters": [
                    {
                        "description": "Valid invite code",
                        "name": "inviteCode",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.joinServerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.joinServerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid invite code"
                    },
                    "401": {
                        "description": "User is not logged in/not authorized"
                    }
                }
            }
        },
        "/server/new": {
            "post": {
                "description": "A logged in user is able to create a new server.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Create a new server on dancord",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.newServerResponse"
                        }
                    }
                }
            }
        },
        "/user/healthcheck": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Check if a user is signed in",
                "responses": {
                    "200": {
                        "description": "if signed in ` + "`" + `{\"success\": true}` + "`" + `"
                    },
                    "401": {
                        "description": "if not signed in"
                    }
                }
            }
        },
        "/user/signin": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Sign a user into dancord",
                "parameters": [
                    {
                        "description": "Password must be atleast 6 characters.",
                        "name": "SignInBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserSigninResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid Credentials"
                    }
                }
            }
        },
        "/user/signout": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Sign a user out of dancord",
                "responses": {
                    "200": {
                        "description": "on successful signout"
                    }
                }
            }
        },
        "/user/signup": {
            "post": {
                "description": "Insert description here",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Sign a user up to dancord",
                "parameters": [
                    {
                        "description": "Password must be atleast 6 characters.",
                        "name": "SignUpBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserSigninResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "UserCredentials": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "daniel321"
                },
                "username": {
                    "type": "string",
                    "example": "daniel"
                }
            }
        },
        "UserSigninResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "1337"
                }
            }
        },
        "handlers.joinServerRequest": {
            "type": "object",
            "properties": {
                "joinCode": {
                    "type": "string",
                    "example": "53Asd2ds"
                }
            }
        },
        "handlers.joinServerResponse": {
            "type": "object",
            "properties": {
                "serverId": {
                    "type": "string",
                    "example": "5020"
                }
            }
        },
        "handlers.newServerResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "5020"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "dancord API",
	Description:      "Backend API sepcifications for dancord",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
