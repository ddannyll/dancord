definitions:
  UserCredentials:
    properties:
      password:
        example: daniel321
        minLength: 6
        type: string
      username:
        example: daniel
        type: string
    required:
    - password
    - username
    type: object
  UserSigninResponse:
    properties:
      id:
        example: "1337"
        type: string
    type: object
  handlers.joinServerRequest:
    properties:
      joinCode:
        example: 53Asd2ds
        type: string
    type: object
  handlers.joinServerResponse:
    properties:
      serverId:
        example: "5020"
        type: string
    type: object
  handlers.listServersResponse:
    properties:
      servers:
        items:
          type: string
        type: array
    type: object
  handlers.newJoinCodeReqeust:
    properties:
      serverId:
        example: "5020"
        type: string
    type: object
  handlers.newJoinCodeResponse:
    properties:
      joinCode:
        example: 53Asd2ds
        type: string
    type: object
  handlers.newServerResponse:
    properties:
      id:
        example: "5020"
        type: string
    type: object
info:
  contact: {}
  description: Backend API sepcifications for dancord
  title: dancord API
  version: "0.1"
paths:
  /ping:
    get:
      consumes:
      - application/json
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Ping the server
      tags:
      - ping
  /server:
    delete:
      description: Only admins can delete their server
      produces:
      - application/json
      responses:
        "200":
          description: '`{success: true}`'
        "401":
          description: User is not logged in
        "403":
          description: User is not an admin in te server
      summary: Delete a server
      tags:
      - server
  /server/join:
    post:
      consumes:
      - application/json
      description: |-
        A logged in user is able to join a server given a valid invite code.
        The serverId is returned
      parameters:
      - description: Valid invite code
        in: body
        name: inviteCode
        required: true
        schema:
          $ref: '#/definitions/handlers.joinServerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.joinServerResponse'
        "400":
          description: Invalid invite code
        "401":
          description: User is not logged in/not authorized
      summary: Join a server given an invite code
      tags:
      - server
  /server/join/new:
    post:
      consumes:
      - application/json
      description: Only server admins should be able to do this
      parameters:
      - description: Valid serverId
        in: body
        name: serverId
        required: true
        schema:
          $ref: '#/definitions/handlers.newJoinCodeReqeust'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.newJoinCodeResponse'
        "401":
          description: User is not logged in
        "403":
          description: User is not an admin
      summary: Create a new join link for a specified server
      tags:
      - server
  /server/list:
    get:
      description: Return a list of servers the user is currently in
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.listServersResponse'
        "401":
          description: User is not logged in
      summary: List the servers the user is in
      tags:
      - server
  /server/new:
    post:
      description: A logged in user is able to create a new server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.newServerResponse'
      summary: Create a new server on dancord
      tags:
      - server
  /user/healthcheck:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: 'if signed in `{"success": true}`'
        "401":
          description: if not signed in
      summary: Check if a user is signed in
      tags:
      - user
  /user/signin:
    post:
      consumes:
      - application/json
      parameters:
      - description: Password must be atleast 6 characters.
        in: body
        name: SignInBody
        required: true
        schema:
          $ref: '#/definitions/UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserSigninResponse'
        "401":
          description: Invalid Credentials
      summary: Sign a user into dancord
      tags:
      - user
  /user/signout:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: on successful signout
      summary: Sign a user out of dancord
      tags:
      - user
  /user/signup:
    post:
      consumes:
      - application/json
      description: Insert description here
      parameters:
      - description: Password must be atleast 6 characters.
        in: body
        name: SignUpBody
        required: true
        schema:
          $ref: '#/definitions/UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserSigninResponse'
      summary: Sign a user up to dancord
      tags:
      - user
swagger: "2.0"
